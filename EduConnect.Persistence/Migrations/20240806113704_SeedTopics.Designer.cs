// <auto-generated />
using System;
using EduConnect.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduConnect.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240806113704_SeedTopics")]
    partial class SeedTopics
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EduConnect.Domain.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid?>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Courses", (string)null);
                });

            modelBuilder.Entity("EduConnect.Domain.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<Guid?>("InstructorManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<DateOnly?>("ManageDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("InstructorManagerId")
                        .IsUnique()
                        .HasFilter("[InstructorManagerId] IS NOT NULL");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("EduConnect.Domain.Instructor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<decimal?>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Instructors", (string)null);
                });

            modelBuilder.Entity("EduConnect.Domain.InstructorCourse", b =>
                {
                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InstructorId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("InstructorCourses", (string)null);
                });

            modelBuilder.Entity("EduConnect.Domain.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("EduConnect.Domain.StudentCourse", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourses", (string)null);
                });

            modelBuilder.Entity("EduConnect.Domain.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Topics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9b0418c2-d8c8-46fb-bd0d-0094f83ad563"),
                            TopicName = "Programming"
                        },
                        new
                        {
                            Id = new Guid("b16ea527-9f9c-4c58-8385-a2f69e5c83d9"),
                            TopicName = "Web Development"
                        },
                        new
                        {
                            Id = new Guid("b9dd9a87-4852-434e-99dd-3103f7fba183"),
                            TopicName = "Mobile App Development"
                        },
                        new
                        {
                            Id = new Guid("7db2ed45-a087-4e00-b804-b944f400f450"),
                            TopicName = "Cloud Computing"
                        },
                        new
                        {
                            Id = new Guid("b8c0db6a-716d-4004-9c89-0e7cf1ba790c"),
                            TopicName = "DevOps Practices"
                        },
                        new
                        {
                            Id = new Guid("62841cba-863b-4816-9366-e789646ca43e"),
                            TopicName = "Cybersecurity"
                        },
                        new
                        {
                            Id = new Guid("096acc69-09a4-4f36-84ff-322e9846ad54"),
                            TopicName = "Machine Learning"
                        },
                        new
                        {
                            Id = new Guid("71fd7466-e4d4-41f6-ace8-ed67ea8fafcf"),
                            TopicName = "Artificial Intelligence"
                        },
                        new
                        {
                            Id = new Guid("df8d86f9-69d9-4eda-9fc4-aa8725c7a47b"),
                            TopicName = "Blockchain Technology"
                        },
                        new
                        {
                            Id = new Guid("5393a6fe-5c8b-42af-a453-2af2c64f5a35"),
                            TopicName = "Internet of Things (IoT)"
                        });
                });

            modelBuilder.Entity("EduConnect.Domain.Course", b =>
                {
                    b.HasOne("EduConnect.Domain.Topic", "Topic")
                        .WithMany("Courses")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("EduConnect.Domain.Department", b =>
                {
                    b.HasOne("EduConnect.Domain.Instructor", "InstructorManager")
                        .WithOne()
                        .HasForeignKey("EduConnect.Domain.Department", "InstructorManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("InstructorManager");
                });

            modelBuilder.Entity("EduConnect.Domain.Instructor", b =>
                {
                    b.HasOne("EduConnect.Domain.Department", "Department")
                        .WithMany("Instructors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EduConnect.Domain.InstructorCourse", b =>
                {
                    b.HasOne("EduConnect.Domain.Course", "Course")
                        .WithMany("InstructorCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Domain.Instructor", "Instructor")
                        .WithMany("InstructorCourses")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("EduConnect.Domain.Student", b =>
                {
                    b.HasOne("EduConnect.Domain.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EduConnect.Domain.StudentCourse", b =>
                {
                    b.HasOne("EduConnect.Domain.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduConnect.Domain.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduConnect.Domain.Course", b =>
                {
                    b.Navigation("InstructorCourses");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("EduConnect.Domain.Department", b =>
                {
                    b.Navigation("Instructors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EduConnect.Domain.Instructor", b =>
                {
                    b.Navigation("InstructorCourses");
                });

            modelBuilder.Entity("EduConnect.Domain.Student", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("EduConnect.Domain.Topic", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
